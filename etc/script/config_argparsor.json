{
    "project": "Argparser for C++",
    "target": "single_include/mblet/argparsor.h",
    "sources": [
        "include/mblet/argparsor.h",
        "src/argparsor-argparsor.cpp",
        "src/argparsor-argument.cpp",
        "src/argparsor-exception.cpp",
        "src/argparsor-valid.cpp"
    ],
    "include_paths": ["include"],
    "add_inlines": [
        "Argparsor::Argparsor(",
        "Argparsor::~Argparsor(",
        "std::string Argparsor::getUsage(",
        "std::string Argparsor::getVersion(",
        "void Argparsor::parseArguments(",
        "Argument& Argparsor::addArgument(",
        "void Argparsor::_parseShortArgument(",
        "void Argparsor::_parseLongArgument(",
        "void Argparsor::_parseArgument(",
        "bool Argparsor::_endOfInfiniteArgument(",
        "void Argparsor::_parsePositionnalArgument(",
        "ArgumentElement::ArgumentElement(",
        "ArgumentElement::~ArgumentElement(",
        "ArgumentElement::operator std::vector<std::string>(",
        "Argument::Argument(",
        "Argument::~Argument(",
        "std::string Argument::getString(",
        "Argument::operator std::vector<std::string>(",
        "Argument::operator std::vector<std::vector<std::string> >(",
        "Argument& Argument::flag(",
        "Argument& Argument::required(",
        "void Argument::_sortNameOrFlags(",
        "void Argument::validFormatFlag(",
        "bool Argument::compareOption(",
        "void Argument::_typeConstructor(",
        "void Argument::_defaultsConstructor(",
        "ValidNumber::ValidNumber(",
        "ValidNumber::~ValidNumber(",
        "bool ValidNumber::isValid(",
        "ValidMinMax::ValidMinMax(",
        "ValidMinMax::~ValidMinMax(",
        "bool ValidMinMax::isValid(",
        "ValidChoise::ValidChoise(",
        "ValidChoise::~ValidChoise(",
        "bool ValidChoise::isValid(",
        "ValidPath::ValidPath(",
        "ValidPath::~ValidPath(",
        "bool ValidPath::isValid(",
        "std::string Argument::_metavarDefault(",
        "void Argument::_toNumber(",
        "Exception::Exception(",
        "Exception::~Exception(",
        "const char* Exception::what(",
        "ArgumentException::ArgumentException(",
        "ArgumentException::~ArgumentException(",
        "const char* ArgumentException::argument(",
        "AccessDeniedException::AccessDeniedException(",
        "AccessDeniedException::~AccessDeniedException(",
        "ParseArgumentException::ParseArgumentException(",
        "ParseArgumentException::~ParseArgumentException(",
        "ParseArgumentRequiredException::ParseArgumentRequiredException(",
        "ParseArgumentRequiredException::~ParseArgumentRequiredException(",
        "ParseArgumentValidException::ParseArgumentValidException(",
        "ParseArgumentValidException::~ParseArgumentValidException("
    ]
}
